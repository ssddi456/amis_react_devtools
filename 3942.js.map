{"version":3,"file":"3942.js","sources":["webpack://@amis-devtools/demo-app/../../node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.54.0(7c2310116c57517348bbd868a21139f32454be22)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/freemarker2/freemarker2.ts\nvar EMPTY_ELEMENTS = [\n  \"assign\",\n  \"flush\",\n  \"ftl\",\n  \"return\",\n  \"global\",\n  \"import\",\n  \"include\",\n  \"break\",\n  \"continue\",\n  \"local\",\n  \"nested\",\n  \"nt\",\n  \"setting\",\n  \"stop\",\n  \"t\",\n  \"lt\",\n  \"rt\",\n  \"fallback\"\n];\nvar BLOCK_ELEMENTS = [\n  \"attempt\",\n  \"autoesc\",\n  \"autoEsc\",\n  \"compress\",\n  \"comment\",\n  \"escape\",\n  \"noescape\",\n  \"function\",\n  \"if\",\n  \"list\",\n  \"items\",\n  \"sep\",\n  \"macro\",\n  \"noparse\",\n  \"noParse\",\n  \"noautoesc\",\n  \"noAutoEsc\",\n  \"outputformat\",\n  \"switch\",\n  \"visit\",\n  \"recurse\"\n];\nvar TagSyntaxAngle = {\n  close: \">\",\n  id: \"angle\",\n  open: \"<\"\n};\nvar TagSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open: \"\\\\[\"\n};\nvar TagSyntaxAuto = {\n  close: \"[>\\\\]]\",\n  id: \"auto\",\n  open: \"[<\\\\[]\"\n};\nvar InterpolationSyntaxDollar = {\n  close: \"\\\\}\",\n  id: \"dollar\",\n  open1: \"\\\\$\",\n  open2: \"\\\\{\"\n};\nvar InterpolationSyntaxBracket = {\n  close: \"\\\\]\",\n  id: \"bracket\",\n  open1: \"\\\\[\",\n  open2: \"=\"\n};\nfunction createLangConfiguration(ts) {\n  return {\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    comments: {\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\n    },\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(\n          `${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\n        ),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createLangConfigurationAuto() {\n  return {\n    // Cannot set block comment delimiter in auto mode...\n    // It depends on the content and the cursor position of the file...\n    brackets: [\n      [\"<\", \">\"],\n      [\"[\", \"]\"],\n      [\"(\", \")\"],\n      [\"{\", \"}\"]\n    ],\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\n    autoClosingPairs: [\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: '\"', close: '\"', notIn: [\"string\"] },\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\n    ],\n    surroundingPairs: [\n      { open: '\"', close: '\"' },\n      { open: \"'\", close: \"'\" },\n      { open: \"{\", close: \"}\" },\n      { open: \"[\", close: \"]\" },\n      { open: \"(\", close: \")\" },\n      { open: \"<\", close: \">\" }\n    ],\n    folding: {\n      markers: {\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\n      }\n    },\n    onEnterRules: [\n      {\n        beforeText: new RegExp(\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\n        ),\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\n        action: {\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n        }\n      },\n      {\n        beforeText: new RegExp(\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\n        ),\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n      }\n    ]\n  };\n}\nfunction createMonarchLanguage(ts, is) {\n  const id = `_${ts.id}_${is.id}`;\n  const s = (name) => name.replace(/__id__/g, id);\n  const r = (regexp) => {\n    const source = regexp.source.replace(/__id__/g, id);\n    return new RegExp(source, regexp.flags);\n  };\n  return {\n    // Settings\n    unicode: true,\n    includeLF: false,\n    start: s(\"default__id__\"),\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    // Dynamic RegExp\n    [s(\"open__id__\")]: new RegExp(ts.open),\n    [s(\"close__id__\")]: new RegExp(ts.close),\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\n    [s(\"iClose__id__\")]: new RegExp(is.close),\n    // <#START_TAG : \"<\" | \"<#\" | \"[#\">\n    // <#END_TAG : \"</\" | \"</#\" | \"[/#\">\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\n    // <#CLOSE_TAG1 : (<BLANK>)* (\">\" | \"]\")>\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\n    // <#CLOSE_TAG2 : (<BLANK>)* (\"/\")? (\">\" | \"]\")>\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\n    // Static RegExp\n    // <#BLANK : \" \" | \"\\t\" | \"\\n\" | \"\\r\">\n    blank: /[ \\t\\n\\r]/,\n    // <FALSE : \"false\">\n    // <TRUE : \"true\">\n    // <IN : \"in\">\n    // <AS : \"as\">\n    // <USING : \"using\">\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\n    // Directive names that cannot have an expression parameters and cannot be self-closing\n    // E.g. <#if id==2> ... </#if>\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\n    // Directive names that cannot have an expression parameter and can be self-closing\n    // E.g. <#if> ... <#else>  ... </#if>\n    // E.g. <#if> ... <#else /></#if>\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\n    // Directive names that can have an expression parameter and cannot be self-closing\n    // E.g. <#if id==2> ... </#if>\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\n    // Directive names that can have an end tag\n    // E.g. </#if>\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\n    // <#ESCAPED_CHAR :\n    //     \"\\\\\"\n    //     (\n    //         (\"n\" | \"t\" | \"r\" | \"f\" | \"b\" | \"g\" | \"l\" | \"a\" | \"\\\\\" | \"'\" | \"\\\"\" | \"{\" | \"=\")\n    //         |\n    //         (\"x\" [\"0\"-\"9\", \"A\"-\"F\", \"a\"-\"f\"])\n    //     )\n    // >\n    // Note: While the JavaCC tokenizer rule only specifies one hex digit,\n    // FreeMarker actually interprets up to 4 hex digits.\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\n    // <#ASCII_DIGIT: [\"0\" - \"9\"]>\n    asciiDigit: /[0-9]/,\n    // <INTEGER : ([\"0\"-\"9\"])+>\n    integer: /[0-9]+/,\n    // <#NON_ESCAPED_ID_START_CHAR:\n    // [\n    // \t  // This was generated on JDK 1.8.0_20 Win64 with src/main/misc/identifierChars/IdentifierCharGenerator.java\n    //    ...\n    // ]\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n    // <#ESCAPED_ID_CHAR: \"\\\\\" (\"-\" | \".\" | \":\" | \"#\")>\n    escapedIdChar: /\\\\[\\-\\.:#]/,\n    // <#ID_START_CHAR: <NON_ESCAPED_ID_START_CHAR>|<ESCAPED_ID_CHAR>>\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\n    // <ID: <ID_START_CHAR> (<ID_START_CHAR>|<ASCII_DIGIT>)*>\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\n    // Certain keywords / operators are allowed to index hashes\n    //\n    // Expression DotVariable(Expression exp) :\n    // {\n    // \tToken t;\n    // }\n    // {\n    // \t\t<DOT>\n    // \t\t(\n    // \t\t\tt = <ID> | t = <TIMES> | t = <DOUBLE_STAR>\n    // \t\t\t|\n    // \t\t\t(\n    // \t\t\t\tt = <LESS_THAN>\n    // \t\t\t\t|\n    // \t\t\t\tt = <LESS_THAN_EQUALS>\n    // \t\t\t\t|\n    // \t\t\t\tt = <ESCAPED_GT>\n    // \t\t\t\t|\n    // \t\t\t\tt = <ESCAPED_GTE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <FALSE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <TRUE>\n    // \t\t\t\t|\n    // \t\t\t\tt = <IN>\n    // \t\t\t\t|\n    // \t\t\t\tt = <AS>\n    // \t\t\t\t|\n    // \t\t\t\tt = <USING>\n    // \t\t\t)\n    // \t\t\t{\n    // \t\t\t\tif (!Character.isLetter(t.image.charAt(0))) {\n    // \t\t\t\t\tthrow new ParseException(t.image + \" is not a valid identifier.\", template, t);\n    // \t\t\t\t}\n    // \t\t\t}\n    // \t\t)\n    // \t\t{\n    // \t\t\tnotListLiteral(exp, \"hash\");\n    // \t\t\tnotStringLiteral(exp, \"hash\");\n    // \t\t\tnotBooleanLiteral(exp, \"hash\");\n    // \t\t\tDot dot = new Dot(exp, t.image);\n    // \t\t\tdot.setLocation(template, exp, t);\n    // \t\t\treturn dot;\n    // \t\t}\n    // }\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\n    // <DOUBLE_EQUALS : \"==\">\n    // <EQUALS : \"=\">\n    // <NOT_EQUALS : \"!=\">\n    // <PLUS_EQUALS : \"+=\">\n    // <MINUS_EQUALS : \"-=\">\n    // <TIMES_EQUALS : \"*=\">\n    // <DIV_EQUALS : \"/=\">\n    // <MOD_EQUALS : \"%=\">\n    // <PLUS_PLUS : \"++\">\n    // <MINUS_MINUS : \"--\">\n    // <LESS_THAN_EQUALS : \"lte\" | \"\\\\lte\" | \"<=\" | \"&lt;=\">\n    // <LESS_THAN : \"lt\" | \"\\\\lt\" | \"<\" | \"&lt;\">\n    // <ESCAPED_GTE : \"gte\" | \"\\\\gte\" | \"&gt;=\">\n    // <ESCAPED_GT: \"gt\" | \"\\\\gt\" |  \"&gt;\">\n    // <DOUBLE_STAR : \"**\">\n    // <PLUS : \"+\">\n    // <MINUS : \"-\">\n    // <TIMES : \"*\">\n    // <PERCENT : \"%\">\n    // <AND : \"&\" | \"&&\" | \"&amp;&amp;\" | \"\\\\and\" >\n    // <OR : \"|\" | \"||\">\n    // <EXCLAM : \"!\">\n    // <COMMA : \",\">\n    // <SEMICOLON : \";\">\n    // <COLON : \":\">\n    // <ELLIPSIS : \"...\">\n    // <DOT_DOT_ASTERISK : \"..*\" >\n    // <DOT_DOT_LESS : \"..<\" | \"..!\" >\n    // <DOT_DOT : \"..\">\n    // <EXISTS : \"??\">\n    // <BUILT_IN : \"?\">\n    // <LAMBDA_ARROW : \"->\" | \"-&gt;\">\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\n    arrows: [\"->\", \"-&gt;\"],\n    delimiters: [\";\", \":\", \",\", \".\"],\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\n    tokenizer: {\n      // Parser states\n      // Plain text\n      [s(\"default__id__\")]: [\n        { include: s(\"@directive_token__id__\") },\n        { include: s(\"@interpolation_and_text_token__id__\") }\n      ],\n      // A FreeMarker expression inside a directive, e.g. <#if 2<3>\n      [s(\"fmExpression__id__.directive\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      // A FreeMarker expression inside an interpolation, e.g. ${2+3}\n      [s(\"fmExpression__id__.interpolation\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      // In an expression and inside a not-yet closed parenthesis / bracket\n      [s(\"inParen__id__.plain\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      [s(\"inParen__id__.gt\")]: [\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\n        { include: s(\"@expression_token__id__\") },\n        { include: s(\"@greater_operators_token__id__\") }\n      ],\n      // Expression for the unified call, e.g. <@createMacro() ... >\n      [s(\"noSpaceExpression__id__\")]: [\n        { include: s(\"@no_space_expression_end_token__id__\") },\n        { include: s(\"@directive_end_token__id__\") },\n        { include: s(\"@expression_token__id__\") }\n      ],\n      // For the function of a unified call. Special case for when the\n      // expression is a simple identifier.\n      // <@join [1,2] \",\">\n      // <@null!join [1,2] \",\">\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\n      // For singly and doubly quoted string (that may contain interpolations)\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\n      // For singly and doubly quoted string (that may not contain interpolations)\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\n      // For a comment in an expression\n      // ${ 1 + <#-- comment --> 2}\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\n      // For <#noparse> ... </#noparse>\n      // For <#noParse> ... </#noParse>\n      // For <#comment> ... </#comment>\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\n      // For <#-- ... -->\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\n      // Common rules\n      [s(\"directive_token__id__\")]: [\n        // <ATTEMPT : <START_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <RECOVER : <START_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SEP : <START_TAG> \"sep\" <CLOSE_TAG1>>\n        // <AUTOESC : <START_TAG> \"auto\" (\"e\"|\"E\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\n        // }\n        // <NOAUTOESC : <START_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        // <COMPRESS : <START_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <DEFAUL : <START_TAG> \"default\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <NOESCAPE : <START_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        //\n        // <COMMENT : <START_TAG> \"comment\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); noparseTag = \"comment\";\n        // }\n        // <NOPARSE: <START_TAG> \"no\" (\"p\" | \"P\") \"arse\" <CLOSE_TAG1>> {\n        //     int tagNamingConvention = getTagNamingConvention(matchedToken, 2);\n        //     handleTagSyntaxAndSwitch(matchedToken, tagNamingConvention, NO_PARSE);\n        //     noparseTag = tagNamingConvention == Configuration.CAMEL_CASE_NAMING_CONVENTION ? \"noParse\" : \"noparse\";\n        // }\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            {\n              cases: {\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\n                \"@default\": { token: \"tag\" }\n              }\n            },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <ELSE : <START_TAG> \"else\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <BREAK : <START_TAG> \"break\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <CONTINUE : <START_TAG> \"continue\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_RETURN : <START_TAG> \"return\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <HALT : <START_TAG> \"stop\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <FLUSH : <START_TAG> \"flush\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <TRIM : <START_TAG> \"t\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <LTRIM : <START_TAG> \"lt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <RTRIM : <START_TAG> \"rt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <NOTRIM : <START_TAG> \"nt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_NESTED : <START_TAG> \"nested\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <SIMPLE_RECURSE : <START_TAG> \"recurse\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <FALLBACK : <START_TAG> \"fallback\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <TRIVIAL_FTL_HEADER : (\"<#ftl\" | \"[#ftl\") (\"/\")? (\">\" | \"]\")> { ftlHeader(matchedToken); }\n        [\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <IF : <START_TAG> \"if\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ELSE_IF : <START_TAG> \"else\" (\"i\" | \"I\") \"f\" <BLANK>> {\n        // \thandleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), FM_EXPRESSION);\n        // }\n        // <LIST : <START_TAG> \"list\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <FOREACH : <START_TAG> \"for\" (\"e\" | \"E\") \"ach\" <BLANK>> {\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), FM_EXPRESSION);\n        // }\n        // <SWITCH : <START_TAG> \"switch\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <CASE : <START_TAG> \"case\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ASSIGN : <START_TAG> \"assign\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <GLOBALASSIGN : <START_TAG> \"global\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <LOCALASSIGN : <START_TAG> \"local\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <_INCLUDE : <START_TAG> \"include\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <IMPORT : <START_TAG> \"import\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <FUNCTION : <START_TAG> \"function\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <MACRO : <START_TAG> \"macro\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <TRANSFORM : <START_TAG> \"transform\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <VISIT : <START_TAG> \"visit\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <STOP : <START_TAG> \"stop\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <RETURN : <START_TAG> \"return\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <CALL : <START_TAG> \"call\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <SETTING : <START_TAG> \"setting\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <OUTPUTFORMAT : <START_TAG> \"output\" (\"f\"|\"F\") \"ormat\" <BLANK>> {\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), FM_EXPRESSION);\n        // }\n        // <NESTED : <START_TAG> \"nested\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <RECURSE : <START_TAG> \"recurse\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        // <ESCAPE : <START_TAG> \"escape\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        //\n        // Note: FreeMarker grammar appears to treat the FTL header as a special case,\n        // in order to remove new lines after the header (?), but since we only need\n        // to tokenize for highlighting, we can include this directive here.\n        // <FTL_HEADER : (\"<#ftl\" | \"[#ftl\") <BLANK>> { ftlHeader(matchedToken); }\n        //\n        // Note: FreeMarker grammar appears to treat the items directive as a special case for\n        // the AST parsing process, but since we only need to tokenize, we can include this\n        // directive here.\n        // <ITEMS : <START_TAG> \"items\" (<BLANK>)+ <AS> <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\n        [\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ],\n        // <END_IF : <END_TAG> \"if\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_LIST : <END_TAG> \"list\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_SEP : <END_TAG> \"sep\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_RECOVER : <END_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ATTEMPT : <END_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_FOREACH : <END_TAG> \"for\" (\"e\" | \"E\") \"ach\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), DEFAULT);\n        // }\n        // <END_LOCAL : <END_TAG> \"local\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_GLOBAL : <END_TAG> \"global\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ASSIGN : <END_TAG> \"assign\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_FUNCTION : <END_TAG> \"function\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_MACRO : <END_TAG> \"macro\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_OUTPUTFORMAT : <END_TAG> \"output\" (\"f\" | \"F\") \"ormat\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), DEFAULT);\n        // }\n        // <END_AUTOESC : <END_TAG> \"auto\" (\"e\" | \"E\") \"sc\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\n        // }\n        // <END_NOAUTOESC : <END_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\n        //   handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        // <END_COMPRESS : <END_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_TRANSFORM : <END_TAG> \"transform\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_SWITCH : <END_TAG> \"switch\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_ESCAPE : <END_TAG> \"escape\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\n        // <END_NOESCAPE : <END_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\n        // }\n        [\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <UNIFIED_CALL : \"<@\" | \"[@\" > { unifiedCall(matchedToken); }\n        [\n          r(/(@open__id__)(@)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\n          ]\n        ],\n        // <UNIFIED_CALL_END : (\"<\" | \"[\") \"/@\" ((<ID>) (\".\"<ID>)*)? <CLOSE_TAG1>> { unifiedCallEnd(matchedToken); }\n        [\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\n          [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\" }\n          ]\n        ],\n        // <TERSE_COMMENT : (\"<\" | \"[\") \"#--\" > { noparseTag = \"-->\"; handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); }\n        [\n          r(/(@open__id__)#--/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\n        ],\n        // <UNKNOWN_DIRECTIVE : (\"[#\" | \"[/#\" | \"<#\" | \"</#\") ([\"a\"-\"z\", \"A\"-\"Z\", \"_\"])+>\n        [\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\n          ts.id === \"auto\" ? {\n            cases: {\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\n            }\n          } : [\n            { token: \"@brackets.directive\" },\n            { token: \"delimiter.directive\" },\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\n          ]\n        ]\n      ],\n      // <DEFAULT, NO_DIRECTIVE> TOKEN :\n      [s(\"interpolation_and_text_token__id__\")]: [\n        // <DOLLAR_INTERPOLATION_OPENING : \"${\"> { startInterpolation(matchedToken); }\n        // <SQUARE_BRACKET_INTERPOLATION_OPENING : \"[=\"> { startInterpolation(matchedToken); }\n        [\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\n          [\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\n            {\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\n              next: s(\"@fmExpression__id__.interpolation\")\n            }\n          ]\n        ],\n        // <STATIC_TEXT_FALSE_ALARM : \"$\" | \"#\" | \"<\" | \"[\" | \"{\"> // to handle a lone dollar sign or \"<\" or \"# or <@ with whitespace after\"\n        // <STATIC_TEXT_WS : (\"\\n\" | \"\\r\" | \"\\t\" | \" \")+>\n        // <STATIC_TEXT_NON_WS : (~[\"$\", \"<\", \"#\", \"[\", \"{\", \"\\n\", \"\\r\", \"\\t\", \" \"])+>\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\n      ],\n      // <STRING_LITERAL :\n      // \t(\n      // \t\t\"\\\"\"\n      // \t\t((~[\"\\\"\", \"\\\\\"]) | <ESCAPED_CHAR>)*\n      // \t\t\"\\\"\"\n      // \t)\n      // \t|\n      // \t(\n      // \t\t\"'\"\n      // \t\t((~[\"'\", \"\\\\\"]) | <ESCAPED_CHAR>)*\n      // \t\t\"'\"\n      // \t)\n      // >\n      [s(\"string_single_token__id__\")]: [\n        [/[^'\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/'/, { token: \"string\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_token__id__\")]: [\n        [/[^\"\\\\]/, { token: \"string\" }],\n        [/@escapedChar/, { token: \"string.escape\" }],\n        [/\"/, { token: \"string\", next: \"@pop\" }]\n      ],\n      // <RAW_STRING : \"r\" ((\"\\\"\" (~[\"\\\"\"])* \"\\\"\") | (\"'\" (~[\"'\"])* \"'\"))>\n      [s(\"string_single_raw_token__id__\")]: [\n        [/[^']+/, { token: \"string.raw\" }],\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      [s(\"string_double_raw_token__id__\")]: [\n        [/[^\"]+/, { token: \"string.raw\" }],\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\n      ],\n      // <FM_EXPRESSION, IN_PAREN, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\n      [s(\"expression_token__id__\")]: [\n        // Strings\n        [\n          /(r?)(['\"])/,\n          {\n            cases: {\n              \"r'\": [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\n              ],\n              'r\"': [\n                { token: \"keyword\" },\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\n              ],\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\n            }\n          }\n        ],\n        // Numbers\n        // <INTEGER : ([\"0\"-\"9\"])+>\n        // <DECIMAL : <INTEGER> \".\" <INTEGER>>\n        [\n          /(?:@integer)(?:\\.(?:@integer))?/,\n          {\n            cases: {\n              \"(?:@integer)\": { token: \"number\" },\n              \"@default\": { token: \"number.float\" }\n            }\n          }\n        ],\n        // Special hash keys that must not be treated as identifiers\n        // after a period, e.g. a.** is accessing the key \"**\" of a\n        [\n          /(\\.)(@blank*)(@specialHashKeys)/,\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\n        ],\n        // Symbols / operators\n        [\n          /(?:@namedSymbols)/,\n          {\n            cases: {\n              \"@arrows\": { token: \"meta.arrow\" },\n              \"@delimiters\": { token: \"delimiter\" },\n              \"@default\": { token: \"operators\" }\n            }\n          }\n        ],\n        // Identifiers\n        [\n          /@id/,\n          {\n            cases: {\n              \"@keywords\": { token: \"keyword.$0\" },\n              \"@stringOperators\": { token: \"operators\" },\n              \"@default\": { token: \"identifier\" }\n            }\n          }\n        ],\n        // <OPEN_BRACKET : \"[\">\n        // <CLOSE_BRACKET : \"]\">\n        // <OPEN_PAREN : \"(\">\n        // <CLOSE_PAREN : \")\">\n        // <OPENING_CURLY_BRACKET : \"{\">\n        // <CLOSING_CURLY_BRACKET : \"}\">\n        [\n          /[\\[\\]\\(\\)\\{\\}]/,\n          {\n            cases: {\n              \"\\\\[\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\]\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  } : {},\n                  // This cannot happen while in auto mode, since this applies only to an\n                  // fmExpression inside a directive. But once we encounter the start of a\n                  // directive, we can establish the tag syntax mode.\n                  ...ts.id === \"bracket\" ? {\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\n                  } : {},\n                  // Ignore mismatched paren\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n              \"\\\\)\": {\n                cases: {\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              },\n              \"\\\\{\": {\n                cases: {\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\n                }\n              },\n              \"\\\\}\": {\n                cases: {\n                  ...is.id === \"bracket\" ? {} : {\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\n                  },\n                  // Ignore mismatched paren\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\n                  \"@default\": { token: \"@brackets\" }\n                }\n              }\n            }\n          }\n        ],\n        // <OPEN_MISPLACED_INTERPOLATION : \"${\" | \"#{\" | \"[=\">\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\n      ],\n      // <FM_EXPRESSION, IN_PAREN, NAMED_PARAMETER_EXPRESSION> SKIP :\n      [s(\"blank_and_expression_comment_token__id__\")]: [\n        // < ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )+ >\n        [/(?:@blank)+/, { token: \"\" }],\n        // < (\"<\" | \"[\") (\"#\" | \"!\") \"--\"> : EXPRESSION_COMMENT\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\n      ],\n      // <FM_EXPRESSION, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\n      [s(\"directive_end_token__id__\")]: [\n        // <DIRECTIVE_END : \">\">\n        // {\n        //     if (inFTLHeader) {\n        //         eatNewline();\n        //         inFTLHeader = false;\n        //     }\n        //     if (squBracTagSyntax || postInterpolationLexState != -1 /* We are in an interpolation */) {\n        //         matchedToken.kind = NATURAL_GT;\n        //     } else {\n        //         SwitchTo(DEFAULT);\n        //     }\n        // }\n        // This cannot happen while in auto mode, since this applies only to an\n        // fmExpression inside a directive. But once we encounter the start of a\n        // directive, we can establish the tag syntax mode.\n        [\n          />/,\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\n        ],\n        // <EMPTY_DIRECTIVE_END : \"/>\" | \"/]\">\n        // It is a syntax error to end a tag with the wrong close token\n        // Let's indicate that to the user by not closing the tag\n        [\n          r(/(\\/)(@close__id__)/),\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\n        ]\n      ],\n      // <IN_PAREN> TOKEN :\n      [s(\"greater_operators_token__id__\")]: [\n        // <NATURAL_GT : \">\">\n        [/>/, { token: \"operators\" }],\n        // <NATURAL_GTE : \">=\">\n        [/>=/, { token: \"operators\" }]\n      ],\n      // <NO_SPACE_EXPRESSION> TOKEN :\n      [s(\"no_space_expression_end_token__id__\")]: [\n        // <TERMINATING_WHITESPACE :  ([\"\\n\", \"\\r\", \"\\t\", \" \"])+> : FM_EXPRESSION\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\n      ],\n      [s(\"unified_call_token__id__\")]: [\n        // Special case for a call where the expression is just an ID\n        // <UNIFIED_CALL> <ID> <BLANK>+\n        [\n          /(@id)((?:@blank)+)/,\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\n        ],\n        [\n          r(/(@id)(\\/?)(@close__id__)/),\n          [\n            { token: \"tag\" },\n            { token: \"delimiter.directive\" },\n            { token: \"@brackets.directive\", next: \"@popall\" }\n          ]\n        ],\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\n      ],\n      // <NO_PARSE> TOKEN :\n      [s(\"no_parse_token__id__\")]: [\n        // <MAYBE_END :\n        // \t (\"<\" | \"[\")\n        // \t \"/\"\n        // \t (\"#\")?\n        // \t ([\"a\"-\"z\", \"A\"-\"Z\"])+\n        // \t ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )*\n        // \t (\">\" | \"]\")\n        // >\n        [\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\n          {\n            cases: {\n              \"$S2==$3\": [\n                { token: \"@brackets.directive\" },\n                { token: \"delimiter.directive\" },\n                { token: \"tag\" },\n                { token: \"\" },\n                { token: \"@brackets.directive\", next: \"@popall\" }\n              ],\n              \"$S2==comment\": [\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" },\n                { token: \"comment\" }\n              ],\n              \"@default\": [\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" },\n                { token: \"source\" }\n              ]\n            }\n          }\n        ],\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\n        [\n          /[^<\\[\\-]+|[<\\[\\-]/,\n          {\n            cases: {\n              \"$S2==comment\": { token: \"comment\" },\n              \"@default\": { token: \"source\" }\n            }\n          }\n        ]\n      ],\n      // <EXPRESSION_COMMENT> SKIP:\n      [s(\"expression_comment_token__id__\")]: [\n        // < \"-->\" | \"--]\">\n        [\n          /--[>\\]]/,\n          {\n            token: \"comment\",\n            next: \"@pop\"\n          }\n        ],\n        // < (~[\"-\", \">\", \"]\"])+ >\n        // < \">\">\n        // < \"]\">\n        // < \"-\">\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\n      ],\n      [s(\"terse_comment_token__id__\")]: [\n        //  <TERSE_COMMENT_END : \"-->\" | \"--]\">\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\n      ]\n    }\n  };\n}\nfunction createMonarchLanguageAuto(is) {\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\n  return {\n    // Angle and bracket syntax mode\n    // We switch to one of these once we have determined the mode\n    ...angle,\n    ...bracket,\n    ...auto,\n    // Settings\n    unicode: true,\n    includeLF: false,\n    start: `default_auto_${is.id}`,\n    ignoreCase: false,\n    defaultToken: \"invalid\",\n    tokenPostfix: `.freemarker2`,\n    brackets: [\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n    ],\n    tokenizer: {\n      ...angle.tokenizer,\n      ...bracket.tokenizer,\n      ...auto.tokenizer\n    }\n  };\n}\nvar TagAngleInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\n};\nvar TagBracketInterpolationDollar = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\n};\nvar TagAngleInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxAngle),\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\n};\nvar TagBracketInterpolationBracket = {\n  conf: createLangConfiguration(TagSyntaxBracket),\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\n};\nvar TagAutoInterpolationDollar = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\n};\nvar TagAutoInterpolationBracket = {\n  conf: createLangConfigurationAuto(),\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\n};\nexport {\n  TagAngleInterpolationBracket,\n  TagAngleInterpolationDollar,\n  TagAutoInterpolationBracket,\n  TagAutoInterpolationDollar,\n  TagBracketInterpolationBracket,\n  TagBracketInterpolationDollar\n};\n"],"names":["Object","RegExp"],"mappings":"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"}